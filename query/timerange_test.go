package query

import (
	"testing"
	"time"

	pbquery "github.com/crypto-zero/go-kit/proto/kit/query/v1"
	"google.golang.org/protobuf/types/known/timestamppb"
)

func TestIsEmptyTimeRange(t *testing.T) {
	testCases := []struct {
		name  string
		input TimeRange
		want  bool
	}{
		{
			name:  "default timerange should be treated as empty",
			input: TimeRange{},
			want:  true,
		},
		{
			name:  "timerange with zero values should be treated as empty",
			input: TimeRange{Begin: time.Time{}, End: time.Time{}},
			want:  true,
		},
		{
			name:  "timerange with current time should not be treated as empty",
			input: TimeRange{Begin: time.Now(), End: time.Now().Add(1 * time.Hour)},
			want:  false,
		},
	}
	for _, tc := range testCases {
		t.Run(
			tc.name, func(t *testing.T) {
				result := IsEmptyTimeRange(tc.input)
				if result != tc.want {
					t.Fatalf("expected IsEmptyTimeRange result: %v, got %v", tc.want, !tc.want)
				}
			},
		)
	}
}

func TestIsEmptyProtoTimestamp(t *testing.T) {
	testCases := []struct {
		name  string
		input *timestamppb.Timestamp
		want  bool
	}{
		{
			name:  "default proto timestamp should be treated as empty",
			input: &timestamppb.Timestamp{},
			want:  true,
		},
		{
			name:  "proto timestamp with zero value should be treated as empty",
			input: &timestamppb.Timestamp{Seconds: 0, Nanos: 0},
			want:  true,
		},
		{
			name:  "nil proto timestamp should be treated as empty",
			input: nil,
			want:  true,
		},
		{
			name:  "proto timestamp with current time should not be treated as empty",
			input: timestamppb.Now(),
			want:  false,
		},
	}
	for _, tc := range testCases {
		t.Run(
			tc.name, func(t *testing.T) {
				t.Log("proto timestamp as time:", tc.input.AsTime())
				result := IsEmptyProtoTimestamp(tc.input)
				if result != tc.want {
					t.Fatalf("expected IsEmptyProtoTimestamp result: %v, got %v", tc.want, !tc.want)
				}
			},
		)
	}
}

func TestFromProtoTimeRange(t *testing.T) {
	testCases := []struct {
		name  string
		input *pbquery.TimeRange
		want  bool
	}{
		{
			name:  "default proto timerange should be transferred to an empty timerange",
			input: &pbquery.TimeRange{},
			want:  true,
		},
		{
			name: "proto timerange with zero values should be transferred to an empty timerange",
			input: &pbquery.TimeRange{
				Begin: &timestamppb.Timestamp{},
				End:   &timestamppb.Timestamp{},
			},
			want: true,
		},
		{
			name:  "nil proto timerange should be transferred to an empty timerange",
			input: nil,
			want:  true,
		},
		{
			name: "proto timerange generated by default time should transferred to an empty timerange",
			input: &pbquery.TimeRange{
				Begin: timestamppb.New(time.Time{}),
				End:   timestamppb.New(time.Time{}),
			},
			want: true,
		},
		{
			name: "proto timerange with empty and current time should not be treated as empty",
			input: &pbquery.TimeRange{
				Begin: &timestamppb.Timestamp{},
				End:   timestamppb.Now(),
			},
			want: false,
		},
	}
	for _, tc := range testCases {
		t.Run(
			tc.name, func(t *testing.T) {
				t.Log("proto timerange:", tc.input)
				timeRange := FromProtoTimeRange(tc.input)
				t.Log("timerange transferred from proto:", timeRange)
				result := IsEmptyTimeRange(timeRange)
				if result != tc.want {
					t.Fatalf("expected IsEmptyTimeRange result: %v, got %v", tc.want, result)
				}
			},
		)
	}
}
